server.port: 7001

api:
  common:
    version: 1.0.0
    title: Smava API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Contact
      url: My
      email: me@mail.com

  customer-service:
    get-customer:
      description: Returns a customer for the specified id
      notes: |
        # Normal response
        If the requested customer id is found the method will return information regarding:
        1. Customer information
        (technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no customer information is found, a <b>404 - Not Found</b> error will be returned

    create-customer:
      description: Creates a Customer
      notes: |
        # Normal response
        The customer information posted to the API will be stored in the DB.

        # Expected error responses
        1. If a customer with the same Id as specified in the posted information already exists,
           it will update the existing entry.


spring:
  h2:
    console:
      enabled: true
      path: /h2
  datasource:
    url: jdbc:h2:file:${user.home}/.h2/customerdb
    username: sa
    password: 
    driver-class-name: org.h2.Driver
  jpa:
    database: h2
    generate-ddl: false
    hibernate:
      ddl-auto: validate
      
    properties:
      hibernate.dialect: org.hibernate.dialect.H2Dialect
      hibernate.format-sql: true
    show-sql: true
  
  flyway:
    baseline-on-migrate: true
    enabled: true
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}
    url: ${spring.datasource.url}
    schemas:
    - PUBLIC

logging:
  level:
    root: INFO
    de.smava: DEBUG
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE

spring.security.oauth2.resourceserver.jwt.jwk-set-uri: http://${app.auth-server}:9999/.well-known/jwks.json


---
spring.profiles: docker

server.port: 8080
